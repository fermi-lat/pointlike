# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
Interface to pointlike
"""

import _pointlike
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pointlike.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _pointlike.PySwigIterator_value(*args)
    def incr(*args): return _pointlike.PySwigIterator_incr(*args)
    def decr(*args): return _pointlike.PySwigIterator_decr(*args)
    def distance(*args): return _pointlike.PySwigIterator_distance(*args)
    def equal(*args): return _pointlike.PySwigIterator_equal(*args)
    def copy(*args): return _pointlike.PySwigIterator_copy(*args)
    def next(*args): return _pointlike.PySwigIterator_next(*args)
    def previous(*args): return _pointlike.PySwigIterator_previous(*args)
    def advance(*args): return _pointlike.PySwigIterator_advance(*args)
    def __eq__(*args): return _pointlike.PySwigIterator___eq__(*args)
    def __ne__(*args): return _pointlike.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _pointlike.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _pointlike.PySwigIterator___isub__(*args)
    def __add__(*args): return _pointlike.PySwigIterator___add__(*args)
    def __sub__(*args): return _pointlike.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _pointlike.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class DoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_DoublePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _pointlike.DoublePair_first_set
    __swig_getmethods__["first"] = _pointlike.DoublePair_first_get
    if _newclass:first = _swig_property(_pointlike.DoublePair_first_get, _pointlike.DoublePair_first_set)
    __swig_setmethods__["second"] = _pointlike.DoublePair_second_set
    __swig_getmethods__["second"] = _pointlike.DoublePair_second_get
    if _newclass:second = _swig_property(_pointlike.DoublePair_second_get, _pointlike.DoublePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _pointlike.delete_DoublePair
    __del__ = lambda self : None;
DoublePair_swigregister = _pointlike.DoublePair_swigregister
DoublePair_swigregister(DoublePair)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pointlike.StringVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pointlike.StringVector___nonzero__(*args)
    def __len__(*args): return _pointlike.StringVector___len__(*args)
    def pop(*args): return _pointlike.StringVector_pop(*args)
    def __getslice__(*args): return _pointlike.StringVector___getslice__(*args)
    def __setslice__(*args): return _pointlike.StringVector___setslice__(*args)
    def __delslice__(*args): return _pointlike.StringVector___delslice__(*args)
    def __delitem__(*args): return _pointlike.StringVector___delitem__(*args)
    def __getitem__(*args): return _pointlike.StringVector___getitem__(*args)
    def __setitem__(*args): return _pointlike.StringVector___setitem__(*args)
    def append(*args): return _pointlike.StringVector_append(*args)
    def empty(*args): return _pointlike.StringVector_empty(*args)
    def size(*args): return _pointlike.StringVector_size(*args)
    def clear(*args): return _pointlike.StringVector_clear(*args)
    def swap(*args): return _pointlike.StringVector_swap(*args)
    def get_allocator(*args): return _pointlike.StringVector_get_allocator(*args)
    def begin(*args): return _pointlike.StringVector_begin(*args)
    def end(*args): return _pointlike.StringVector_end(*args)
    def rbegin(*args): return _pointlike.StringVector_rbegin(*args)
    def rend(*args): return _pointlike.StringVector_rend(*args)
    def pop_back(*args): return _pointlike.StringVector_pop_back(*args)
    def erase(*args): return _pointlike.StringVector_erase(*args)
    def __init__(self, *args): 
        this = _pointlike.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pointlike.StringVector_push_back(*args)
    def front(*args): return _pointlike.StringVector_front(*args)
    def back(*args): return _pointlike.StringVector_back(*args)
    def assign(*args): return _pointlike.StringVector_assign(*args)
    def resize(*args): return _pointlike.StringVector_resize(*args)
    def insert(*args): return _pointlike.StringVector_insert(*args)
    def reserve(*args): return _pointlike.StringVector_reserve(*args)
    def capacity(*args): return _pointlike.StringVector_capacity(*args)
    __swig_destroy__ = _pointlike.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _pointlike.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pointlike.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pointlike.DoubleVector___nonzero__(*args)
    def __len__(*args): return _pointlike.DoubleVector___len__(*args)
    def pop(*args): return _pointlike.DoubleVector_pop(*args)
    def __getslice__(*args): return _pointlike.DoubleVector___getslice__(*args)
    def __setslice__(*args): return _pointlike.DoubleVector___setslice__(*args)
    def __delslice__(*args): return _pointlike.DoubleVector___delslice__(*args)
    def __delitem__(*args): return _pointlike.DoubleVector___delitem__(*args)
    def __getitem__(*args): return _pointlike.DoubleVector___getitem__(*args)
    def __setitem__(*args): return _pointlike.DoubleVector___setitem__(*args)
    def append(*args): return _pointlike.DoubleVector_append(*args)
    def empty(*args): return _pointlike.DoubleVector_empty(*args)
    def size(*args): return _pointlike.DoubleVector_size(*args)
    def clear(*args): return _pointlike.DoubleVector_clear(*args)
    def swap(*args): return _pointlike.DoubleVector_swap(*args)
    def get_allocator(*args): return _pointlike.DoubleVector_get_allocator(*args)
    def begin(*args): return _pointlike.DoubleVector_begin(*args)
    def end(*args): return _pointlike.DoubleVector_end(*args)
    def rbegin(*args): return _pointlike.DoubleVector_rbegin(*args)
    def rend(*args): return _pointlike.DoubleVector_rend(*args)
    def pop_back(*args): return _pointlike.DoubleVector_pop_back(*args)
    def erase(*args): return _pointlike.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = _pointlike.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pointlike.DoubleVector_push_back(*args)
    def front(*args): return _pointlike.DoubleVector_front(*args)
    def back(*args): return _pointlike.DoubleVector_back(*args)
    def assign(*args): return _pointlike.DoubleVector_assign(*args)
    def resize(*args): return _pointlike.DoubleVector_resize(*args)
    def insert(*args): return _pointlike.DoubleVector_insert(*args)
    def reserve(*args): return _pointlike.DoubleVector_reserve(*args)
    def capacity(*args): return _pointlike.DoubleVector_capacity(*args)
    __swig_destroy__ = _pointlike.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pointlike.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pointlike.FloatVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pointlike.FloatVector___nonzero__(*args)
    def __len__(*args): return _pointlike.FloatVector___len__(*args)
    def pop(*args): return _pointlike.FloatVector_pop(*args)
    def __getslice__(*args): return _pointlike.FloatVector___getslice__(*args)
    def __setslice__(*args): return _pointlike.FloatVector___setslice__(*args)
    def __delslice__(*args): return _pointlike.FloatVector___delslice__(*args)
    def __delitem__(*args): return _pointlike.FloatVector___delitem__(*args)
    def __getitem__(*args): return _pointlike.FloatVector___getitem__(*args)
    def __setitem__(*args): return _pointlike.FloatVector___setitem__(*args)
    def append(*args): return _pointlike.FloatVector_append(*args)
    def empty(*args): return _pointlike.FloatVector_empty(*args)
    def size(*args): return _pointlike.FloatVector_size(*args)
    def clear(*args): return _pointlike.FloatVector_clear(*args)
    def swap(*args): return _pointlike.FloatVector_swap(*args)
    def get_allocator(*args): return _pointlike.FloatVector_get_allocator(*args)
    def begin(*args): return _pointlike.FloatVector_begin(*args)
    def end(*args): return _pointlike.FloatVector_end(*args)
    def rbegin(*args): return _pointlike.FloatVector_rbegin(*args)
    def rend(*args): return _pointlike.FloatVector_rend(*args)
    def pop_back(*args): return _pointlike.FloatVector_pop_back(*args)
    def erase(*args): return _pointlike.FloatVector_erase(*args)
    def __init__(self, *args): 
        this = _pointlike.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pointlike.FloatVector_push_back(*args)
    def front(*args): return _pointlike.FloatVector_front(*args)
    def back(*args): return _pointlike.FloatVector_back(*args)
    def assign(*args): return _pointlike.FloatVector_assign(*args)
    def resize(*args): return _pointlike.FloatVector_resize(*args)
    def insert(*args): return _pointlike.FloatVector_insert(*args)
    def reserve(*args): return _pointlike.FloatVector_reserve(*args)
    def capacity(*args): return _pointlike.FloatVector_capacity(*args)
    __swig_destroy__ = _pointlike.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _pointlike.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pointlike.LongVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pointlike.LongVector___nonzero__(*args)
    def __len__(*args): return _pointlike.LongVector___len__(*args)
    def pop(*args): return _pointlike.LongVector_pop(*args)
    def __getslice__(*args): return _pointlike.LongVector___getslice__(*args)
    def __setslice__(*args): return _pointlike.LongVector___setslice__(*args)
    def __delslice__(*args): return _pointlike.LongVector___delslice__(*args)
    def __delitem__(*args): return _pointlike.LongVector___delitem__(*args)
    def __getitem__(*args): return _pointlike.LongVector___getitem__(*args)
    def __setitem__(*args): return _pointlike.LongVector___setitem__(*args)
    def append(*args): return _pointlike.LongVector_append(*args)
    def empty(*args): return _pointlike.LongVector_empty(*args)
    def size(*args): return _pointlike.LongVector_size(*args)
    def clear(*args): return _pointlike.LongVector_clear(*args)
    def swap(*args): return _pointlike.LongVector_swap(*args)
    def get_allocator(*args): return _pointlike.LongVector_get_allocator(*args)
    def begin(*args): return _pointlike.LongVector_begin(*args)
    def end(*args): return _pointlike.LongVector_end(*args)
    def rbegin(*args): return _pointlike.LongVector_rbegin(*args)
    def rend(*args): return _pointlike.LongVector_rend(*args)
    def pop_back(*args): return _pointlike.LongVector_pop_back(*args)
    def erase(*args): return _pointlike.LongVector_erase(*args)
    def __init__(self, *args): 
        this = _pointlike.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pointlike.LongVector_push_back(*args)
    def front(*args): return _pointlike.LongVector_front(*args)
    def back(*args): return _pointlike.LongVector_back(*args)
    def assign(*args): return _pointlike.LongVector_assign(*args)
    def resize(*args): return _pointlike.LongVector_resize(*args)
    def insert(*args): return _pointlike.LongVector_insert(*args)
    def reserve(*args): return _pointlike.LongVector_reserve(*args)
    def capacity(*args): return _pointlike.LongVector_capacity(*args)
    __swig_destroy__ = _pointlike.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _pointlike.LongVector_swigregister
LongVector_swigregister(LongVector)

class Hep3Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hep3Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hep3Vector, name)
    __repr__ = _swig_repr
    X = _pointlike.Hep3Vector_X
    Y = _pointlike.Hep3Vector_Y
    Z = _pointlike.Hep3Vector_Z
    NUM_COORDINATES = _pointlike.Hep3Vector_NUM_COORDINATES
    SIZE = _pointlike.Hep3Vector_SIZE
    def __init__(self, *args): 
        this = _pointlike.new_Hep3Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_Hep3Vector
    __del__ = lambda self : None;
    def __call__(*args): return _pointlike.Hep3Vector___call__(*args)
    def x(*args): return _pointlike.Hep3Vector_x(*args)
    def y(*args): return _pointlike.Hep3Vector_y(*args)
    def z(*args): return _pointlike.Hep3Vector_z(*args)
    def setX(*args): return _pointlike.Hep3Vector_setX(*args)
    def setY(*args): return _pointlike.Hep3Vector_setY(*args)
    def setZ(*args): return _pointlike.Hep3Vector_setZ(*args)
    def set(*args): return _pointlike.Hep3Vector_set(*args)
    def phi(*args): return _pointlike.Hep3Vector_phi(*args)
    def mag2(*args): return _pointlike.Hep3Vector_mag2(*args)
    def mag(*args): return _pointlike.Hep3Vector_mag(*args)
    def setPhi(*args): return _pointlike.Hep3Vector_setPhi(*args)
    def setTheta(*args): return _pointlike.Hep3Vector_setTheta(*args)
    def setMag(*args): return _pointlike.Hep3Vector_setMag(*args)
    def setPerp(*args): return _pointlike.Hep3Vector_setPerp(*args)
    def setCylTheta(*args): return _pointlike.Hep3Vector_setCylTheta(*args)
    def perp2(*args): return _pointlike.Hep3Vector_perp2(*args)
    def perp(*args): return _pointlike.Hep3Vector_perp(*args)
    def __eq__(*args): return _pointlike.Hep3Vector___eq__(*args)
    def __ne__(*args): return _pointlike.Hep3Vector___ne__(*args)
    def isNear(*args): return _pointlike.Hep3Vector_isNear(*args)
    def howNear(*args): return _pointlike.Hep3Vector_howNear(*args)
    def deltaR(*args): return _pointlike.Hep3Vector_deltaR(*args)
    def __iadd__(*args): return _pointlike.Hep3Vector___iadd__(*args)
    def __isub__(*args): return _pointlike.Hep3Vector___isub__(*args)
    def __neg__(*args): return _pointlike.Hep3Vector___neg__(*args)
    def __idiv__(*args): return _pointlike.Hep3Vector___idiv__(*args)
    def unit(*args): return _pointlike.Hep3Vector_unit(*args)
    def orthogonal(*args): return _pointlike.Hep3Vector_orthogonal(*args)
    def dot(*args): return _pointlike.Hep3Vector_dot(*args)
    def cross(*args): return _pointlike.Hep3Vector_cross(*args)
    def pseudoRapidity(*args): return _pointlike.Hep3Vector_pseudoRapidity(*args)
    def setEta(*args): return _pointlike.Hep3Vector_setEta(*args)
    def setCylEta(*args): return _pointlike.Hep3Vector_setCylEta(*args)
    def rotateX(*args): return _pointlike.Hep3Vector_rotateX(*args)
    def rotateY(*args): return _pointlike.Hep3Vector_rotateY(*args)
    def rotateZ(*args): return _pointlike.Hep3Vector_rotateZ(*args)
    def rotateUz(*args): return _pointlike.Hep3Vector_rotateUz(*args)
    def __imul__(*args): return _pointlike.Hep3Vector___imul__(*args)
    def transform(*args): return _pointlike.Hep3Vector_transform(*args)
    def setRThetaPhi(*args): return _pointlike.Hep3Vector_setRThetaPhi(*args)
    def setREtaPhi(*args): return _pointlike.Hep3Vector_setREtaPhi(*args)
    def setRhoPhiZ(*args): return _pointlike.Hep3Vector_setRhoPhiZ(*args)
    def setRhoPhiTheta(*args): return _pointlike.Hep3Vector_setRhoPhiTheta(*args)
    def setRhoPhiEta(*args): return _pointlike.Hep3Vector_setRhoPhiEta(*args)
    def getX(*args): return _pointlike.Hep3Vector_getX(*args)
    def getY(*args): return _pointlike.Hep3Vector_getY(*args)
    def getZ(*args): return _pointlike.Hep3Vector_getZ(*args)
    def getR(*args): return _pointlike.Hep3Vector_getR(*args)
    def getTheta(*args): return _pointlike.Hep3Vector_getTheta(*args)
    def getPhi(*args): return _pointlike.Hep3Vector_getPhi(*args)
    def r(*args): return _pointlike.Hep3Vector_r(*args)
    def rho(*args): return _pointlike.Hep3Vector_rho(*args)
    def getRho(*args): return _pointlike.Hep3Vector_getRho(*args)
    def getEta(*args): return _pointlike.Hep3Vector_getEta(*args)
    def setR(*args): return _pointlike.Hep3Vector_setR(*args)
    def setRho(*args): return _pointlike.Hep3Vector_setRho(*args)
    def compare(*args): return _pointlike.Hep3Vector_compare(*args)
    def __gt__(*args): return _pointlike.Hep3Vector___gt__(*args)
    def __lt__(*args): return _pointlike.Hep3Vector___lt__(*args)
    def __ge__(*args): return _pointlike.Hep3Vector___ge__(*args)
    def __le__(*args): return _pointlike.Hep3Vector___le__(*args)
    def diff2(*args): return _pointlike.Hep3Vector_diff2(*args)
    __swig_getmethods__["setTolerance"] = lambda x: _pointlike.Hep3Vector_setTolerance
    if _newclass:setTolerance = staticmethod(_pointlike.Hep3Vector_setTolerance)
    __swig_getmethods__["getTolerance"] = lambda x: _pointlike.Hep3Vector_getTolerance
    if _newclass:getTolerance = staticmethod(_pointlike.Hep3Vector_getTolerance)
    def isParallel(*args): return _pointlike.Hep3Vector_isParallel(*args)
    def isOrthogonal(*args): return _pointlike.Hep3Vector_isOrthogonal(*args)
    def howParallel(*args): return _pointlike.Hep3Vector_howParallel(*args)
    def howOrthogonal(*args): return _pointlike.Hep3Vector_howOrthogonal(*args)
    ToleranceTicks = _pointlike.Hep3Vector_ToleranceTicks
    def beta(*args): return _pointlike.Hep3Vector_beta(*args)
    def gamma(*args): return _pointlike.Hep3Vector_gamma(*args)
    def coLinearRapidity(*args): return _pointlike.Hep3Vector_coLinearRapidity(*args)
    def angle(*args): return _pointlike.Hep3Vector_angle(*args)
    def theta(*args): return _pointlike.Hep3Vector_theta(*args)
    def cosTheta(*args): return _pointlike.Hep3Vector_cosTheta(*args)
    def cos2Theta(*args): return _pointlike.Hep3Vector_cos2Theta(*args)
    def project(*args): return _pointlike.Hep3Vector_project(*args)
    def perpPart(*args): return _pointlike.Hep3Vector_perpPart(*args)
    def rapidity(*args): return _pointlike.Hep3Vector_rapidity(*args)
    def eta(*args): return _pointlike.Hep3Vector_eta(*args)
    def deltaPhi(*args): return _pointlike.Hep3Vector_deltaPhi(*args)
    def polarAngle(*args): return _pointlike.Hep3Vector_polarAngle(*args)
    def azimAngle(*args): return _pointlike.Hep3Vector_azimAngle(*args)
    def rotate(*args): return _pointlike.Hep3Vector_rotate(*args)
    def __getitem__(*args): return _pointlike.Hep3Vector___getitem__(*args)
    def __len__(*args): return _pointlike.Hep3Vector___len__(*args)
Hep3Vector_swigregister = _pointlike.Hep3Vector_swigregister
Hep3Vector_swigregister(Hep3Vector)
Hep3Vector_setTolerance = _pointlike.Hep3Vector_setTolerance
Hep3Vector_getTolerance = _pointlike.Hep3Vector_getTolerance

rotationXOf = _pointlike.rotationXOf
rotationYOf = _pointlike.rotationYOf
rotationZOf = _pointlike.rotationZOf
__lshift__ = _pointlike.__lshift__
__rshift__ = _pointlike.__rshift__
__div__ = _pointlike.__div__
__add__ = _pointlike.__add__
__sub__ = _pointlike.__sub__
class HepRotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HepRotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HepRotation, name)
    __repr__ = _swig_repr
    def __getitem__(*args): return _pointlike.HepRotation___getitem__(*args)
    def __len__(*args): return _pointlike.HepRotation___len__(*args)
    def __init__(self, *args): 
        this = _pointlike.new_HepRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_HepRotation
    __del__ = lambda self : None;
HepRotation_swigregister = _pointlike.HepRotation_swigregister
HepRotation_swigregister(HepRotation)
rotationOf = _pointlike.rotationOf
cvar = _pointlike.cvar
HepXHat = cvar.HepXHat
HepYHat = cvar.HepYHat
HepZHat = cvar.HepZHat
__mul__ = _pointlike.__mul__

class SkyProj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyProj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyProj, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pointlike.delete_SkyProj
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pointlike.new_SkyProj(*args)
        try: self.this.append(this)
        except: self.this = this
    def sph2pix(*args): return _pointlike.SkyProj_sph2pix(*args)
    def pix2pix(*args): return _pointlike.SkyProj_pix2pix(*args)
    def pix2sph(*args): return _pointlike.SkyProj_pix2sph(*args)
    def isGalactic(*args): return _pointlike.SkyProj_isGalactic(*args)
    def range(*args): return _pointlike.SkyProj_range(*args)
    def testpix2sph(*args): return _pointlike.SkyProj_testpix2sph(*args)
    def setKeywords(*args): return _pointlike.SkyProj_setKeywords(*args)
    def projType(*args): return _pointlike.SkyProj_projType(*args)
SkyProj_swigregister = _pointlike.SkyProj_swigregister
SkyProj_swigregister(SkyProj)

class SkyDir(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyDir, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyDir, name)
    __repr__ = _swig_repr
    GALACTIC = _pointlike.SkyDir_GALACTIC
    EQUATORIAL = _pointlike.SkyDir_EQUATORIAL
    def __init__(self, *args): 
        this = _pointlike.new_SkyDir(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return _pointlike.SkyDir___call__(*args)
    def l(*args): return _pointlike.SkyDir_l(*args)
    def b(*args): return _pointlike.SkyDir_b(*args)
    def ra(*args): return _pointlike.SkyDir_ra(*args)
    def dec(*args): return _pointlike.SkyDir_dec(*args)
    def dir(*args): return _pointlike.SkyDir_dir(*args)
    def difference(*args): return _pointlike.SkyDir_difference(*args)
    def project(*args): return _pointlike.SkyDir_project(*args)
    def isValid(*args): return _pointlike.SkyDir_isValid(*args)
    def __getitem__(*args): return _pointlike.SkyDir___getitem__(*args)
    def __len__(*args): return _pointlike.SkyDir___len__(*args)
    __swig_destroy__ = _pointlike.delete_SkyDir
    __del__ = lambda self : None;
SkyDir_swigregister = _pointlike.SkyDir_swigregister
SkyDir_swigregister(SkyDir)

class Photon(SkyDir):
    __swig_setmethods__ = {}
    for _s in [SkyDir]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Photon, name, value)
    __swig_getmethods__ = {}
    for _s in [SkyDir]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Photon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_Photon(*args)
        try: self.this.append(this)
        except: self.this = this
    def energy(*args): return _pointlike.Photon_energy(*args)
    def eventClass(*args): return _pointlike.Photon_eventClass(*args)
    def time(*args): return _pointlike.Photon_time(*args)
    def source(*args): return _pointlike.Photon_source(*args)
    __swig_destroy__ = _pointlike.delete_Photon
    __del__ = lambda self : None;
Photon_swigregister = _pointlike.Photon_swigregister
Photon_swigregister(Photon)

class PointingTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointingTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointingTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_PointingTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def localToCelestial(*args): return _pointlike.PointingTransform_localToCelestial(*args)
    def gDir(*args): return _pointlike.PointingTransform_gDir(*args)
    __swig_destroy__ = _pointlike.delete_PointingTransform
    __del__ = lambda self : None;
PointingTransform_swigregister = _pointlike.PointingTransform_swigregister
PointingTransform_swigregister(PointingTransform)

class PointingHistory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointingHistory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointingHistory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_PointingHistory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_PointingHistory
    __del__ = lambda self : None;
    def __call__(*args): return _pointlike.PointingHistory___call__(*args)
    def startTime(*args): return _pointlike.PointingHistory_startTime(*args)
    def endTime(*args): return _pointlike.PointingHistory_endTime(*args)
PointingHistory_swigregister = _pointlike.PointingHistory_swigregister
PointingHistory_swigregister(PointingHistory)

class PointingInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointingInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointingInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_PointingInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_PointingInfo
    __del__ = lambda self : None;
    def xAxis(*args): return _pointlike.PointingInfo_xAxis(*args)
    def zAxis(*args): return _pointlike.PointingInfo_zAxis(*args)
    def zenith(*args): return _pointlike.PointingInfo_zenith(*args)
    def position(*args): return _pointlike.PointingInfo_position(*args)
    def earthCoord(*args): return _pointlike.PointingInfo_earthCoord(*args)
    def rotation(*args): return _pointlike.PointingInfo_rotation(*args)
    def interpolate(*args): return _pointlike.PointingInfo_interpolate(*args)
PointingInfo_swigregister = _pointlike.PointingInfo_swigregister
PointingInfo_swigregister(PointingInfo)

class EarthCoordinate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EarthCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EarthCoordinate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_EarthCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    def insideSAA(*args): return _pointlike.EarthCoordinate_insideSAA(*args)
    __swig_getmethods__["earthRadius"] = lambda x: _pointlike.EarthCoordinate_earthRadius
    if _newclass:earthRadius = staticmethod(_pointlike.EarthCoordinate_earthRadius)
    def latitude(*args): return _pointlike.EarthCoordinate_latitude(*args)
    def longitude(*args): return _pointlike.EarthCoordinate_longitude(*args)
    def altitude(*args): return _pointlike.EarthCoordinate_altitude(*args)
    def L(*args): return _pointlike.EarthCoordinate_L(*args)
    def B(*args): return _pointlike.EarthCoordinate_B(*args)
    def geolat(*args): return _pointlike.EarthCoordinate_geolat(*args)
    def geolon(*args): return _pointlike.EarthCoordinate_geolon(*args)
    def magnetic_field(*args): return _pointlike.EarthCoordinate_magnetic_field(*args)
    __swig_getmethods__["setSAAboundary"] = lambda x: _pointlike.EarthCoordinate_setSAAboundary
    if _newclass:setSAAboundary = staticmethod(_pointlike.EarthCoordinate_setSAAboundary)
    __swig_destroy__ = _pointlike.delete_EarthCoordinate
    __del__ = lambda self : None;
EarthCoordinate_swigregister = _pointlike.EarthCoordinate_swigregister
EarthCoordinate_swigregister(EarthCoordinate)
EarthCoordinate_earthRadius = _pointlike.EarthCoordinate_earthRadius
EarthCoordinate_setSAAboundary = _pointlike.EarthCoordinate_setSAAboundary

class Healpix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Healpix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Healpix, name)
    __repr__ = _swig_repr
    RING = _pointlike.Healpix_RING
    NESTED = _pointlike.Healpix_NESTED
    NEST = _pointlike.Healpix_NEST
    def __init__(self, *args): 
        this = _pointlike.new_Healpix(*args)
        try: self.this.append(this)
        except: self.this = this
    def nside(*args): return _pointlike.Healpix_nside(*args)
    def npix(*args): return _pointlike.Healpix_npix(*args)
    def size(*args): return _pointlike.Healpix_size(*args)
    def pixelArea(*args): return _pointlike.Healpix_pixelArea(*args)
    def ord(*args): return _pointlike.Healpix_ord(*args)
    def nested(*args): return _pointlike.Healpix_nested(*args)
    def coordsys(*args): return _pointlike.Healpix_coordsys(*args)
    def galactic(*args): return _pointlike.Healpix_galactic(*args)
    def findNeighbors(*args): return _pointlike.Healpix_findNeighbors(*args)
    def query_disc(*args): return _pointlike.Healpix_query_disc(*args)
    def pix2ang(*args): return _pointlike.Healpix_pix2ang(*args)
    def ang2pix(*args): return _pointlike.Healpix_ang2pix(*args)
    __swig_destroy__ = _pointlike.delete_Healpix
    __del__ = lambda self : None;
Healpix_swigregister = _pointlike.Healpix_swigregister
Healpix_swigregister(Healpix)

class HealpixMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HealpixMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HealpixMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_HealpixMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_HealpixMap
    __del__ = lambda self : None;
    def save(*args): return _pointlike.HealpixMap_save(*args)
    def load(*args): return _pointlike.HealpixMap_load(*args)
    def level(*args): return _pointlike.HealpixMap_level(*args)
    def __getitem__(*args): return _pointlike.HealpixMap___getitem__(*args)
    def __call__(*args): return _pointlike.HealpixMap___call__(*args)
    def __len__(*args): return _pointlike.HealpixMap___len__(*args)
HealpixMap_swigregister = _pointlike.HealpixMap_swigregister
HealpixMap_swigregister(HealpixMap)

class Module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_Module(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_Module
    __del__ = lambda self : None;
    def getValue(*args): return _pointlike.Module_getValue(*args)
    def getList(*args): return _pointlike.Module_getList(*args)
    def type(*args): return _pointlike.Module_type(*args)
    def call(*args): return _pointlike.Module_call(*args)
    def attribute(*args): return _pointlike.Module_attribute(*args)
    def root(*args): return _pointlike.Module_root(*args)
    __swig_getmethods__["test"] = lambda x: _pointlike.Module_test
    if _newclass:test = staticmethod(_pointlike.Module_test)
Module_swigregister = _pointlike.Module_swigregister
Module_swigregister(Module)
Module_test = _pointlike.Module_test

class SimpleLikelihood(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleLikelihood, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleLikelihood, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_SimpleLikelihood(*args)
        try: self.this.append(this)
        except: self.this = this
    def maximize(*args): return _pointlike.SimpleLikelihood_maximize(*args)
    def photons(*args): return _pointlike.SimpleLikelihood_photons(*args)
    def gradient(*args): return _pointlike.SimpleLikelihood_gradient(*args)
    def curvature(*args): return _pointlike.SimpleLikelihood_curvature(*args)
    def value(*args): return _pointlike.SimpleLikelihood_value(*args)
    def setDir(*args): return _pointlike.SimpleLikelihood_setDir(*args)
    def alpha(*args): return _pointlike.SimpleLikelihood_alpha(*args)
    def setalpha(*args): return _pointlike.SimpleLikelihood_setalpha(*args)
    def sigma_alpha(*args): return _pointlike.SimpleLikelihood_sigma_alpha(*args)
    def TS(*args): return _pointlike.SimpleLikelihood_TS(*args)
    def setBackgroundDensity(*args): return _pointlike.SimpleLikelihood_setBackgroundDensity(*args)
    def poissonLikelihood(*args): return _pointlike.SimpleLikelihood_poissonLikelihood(*args)
    def signal(*args): return _pointlike.SimpleLikelihood_signal(*args)
    def background(*args): return _pointlike.SimpleLikelihood_background(*args)
    def solidAngle(*args): return _pointlike.SimpleLikelihood_solidAngle(*args)
    def umax(*args): return _pointlike.SimpleLikelihood_umax(*args)
    def average_u(*args): return _pointlike.SimpleLikelihood_average_u(*args)
    def average_b(*args): return _pointlike.SimpleLikelihood_average_b(*args)
    def feval(*args): return _pointlike.SimpleLikelihood_feval(*args)
    def kcurvature(*args): return _pointlike.SimpleLikelihood_kcurvature(*args)
    def geval(*args): return _pointlike.SimpleLikelihood_geval(*args)
    def gcurvature(*args): return _pointlike.SimpleLikelihood_gcurvature(*args)
    def changepsf(*args): return _pointlike.SimpleLikelihood_changepsf(*args)
    def setgamma(*args): return _pointlike.SimpleLikelihood_setgamma(*args)
    def __call__(*args): return _pointlike.SimpleLikelihood___call__(*args)
    def sigma(*args): return _pointlike.SimpleLikelihood_sigma(*args)
    def setsigma(*args): return _pointlike.SimpleLikelihood_setsigma(*args)
    def recalc(*args): return _pointlike.SimpleLikelihood_recalc(*args)
    __swig_getmethods__["diffuse"] = lambda x: _pointlike.SimpleLikelihood_diffuse
    if _newclass:diffuse = staticmethod(_pointlike.SimpleLikelihood_diffuse)
    __swig_getmethods__["setDiffuse"] = lambda x: _pointlike.SimpleLikelihood_setDiffuse
    if _newclass:setDiffuse = staticmethod(_pointlike.SimpleLikelihood_setDiffuse)
    __swig_getmethods__["tolerance"] = lambda x: _pointlike.SimpleLikelihood_tolerance
    if _newclass:tolerance = staticmethod(_pointlike.SimpleLikelihood_tolerance)
    __swig_getmethods__["setTolerance"] = lambda x: _pointlike.SimpleLikelihood_setTolerance
    if _newclass:setTolerance = staticmethod(_pointlike.SimpleLikelihood_setTolerance)
    __swig_getmethods__["defaultUmax"] = lambda x: _pointlike.SimpleLikelihood_defaultUmax
    if _newclass:defaultUmax = staticmethod(_pointlike.SimpleLikelihood_defaultUmax)
    __swig_getmethods__["setDefaultUmax"] = lambda x: _pointlike.SimpleLikelihood_setDefaultUmax
    if _newclass:setDefaultUmax = staticmethod(_pointlike.SimpleLikelihood_setDefaultUmax)
    __swig_destroy__ = _pointlike.delete_SimpleLikelihood
    __del__ = lambda self : None;
SimpleLikelihood_swigregister = _pointlike.SimpleLikelihood_swigregister
SimpleLikelihood_swigregister(SimpleLikelihood)
SimpleLikelihood_diffuse = _pointlike.SimpleLikelihood_diffuse
SimpleLikelihood_setDiffuse = _pointlike.SimpleLikelihood_setDiffuse
SimpleLikelihood_tolerance = _pointlike.SimpleLikelihood_tolerance
SimpleLikelihood_setTolerance = _pointlike.SimpleLikelihood_setTolerance
SimpleLikelihood_defaultUmax = _pointlike.SimpleLikelihood_defaultUmax
SimpleLikelihood_setDefaultUmax = _pointlike.SimpleLikelihood_setDefaultUmax

class PointSourceLikelihood(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointSourceLikelihood, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointSourceLikelihood, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_PointSourceLikelihood(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_PointSourceLikelihood
    __del__ = lambda self : None;
    def maximize(*args): return _pointlike.PointSourceLikelihood_maximize(*args)
    def setDir(*args): return _pointlike.PointSourceLikelihood_setDir(*args)
    def gradient(*args): return _pointlike.PointSourceLikelihood_gradient(*args)
    def curvature(*args): return _pointlike.PointSourceLikelihood_curvature(*args)
    def printSpectrum(*args): return _pointlike.PointSourceLikelihood_printSpectrum(*args)
    def localize(*args): return _pointlike.PointSourceLikelihood_localize(*args)
    def name(*args): return _pointlike.PointSourceLikelihood_name(*args)
    def dir(*args): return _pointlike.PointSourceLikelihood_dir(*args)
    def TS(*args): return _pointlike.PointSourceLikelihood_TS(*args)
    def levelTS(*args): return _pointlike.PointSourceLikelihood_levelTS(*args)
    def logL(*args): return _pointlike.PointSourceLikelihood_logL(*args)
    def errorCircle(*args): return _pointlike.PointSourceLikelihood_errorCircle(*args)
    def set_ostream(*args): return _pointlike.PointSourceLikelihood_set_ostream(*args)
    def set_verbose(*args): return _pointlike.PointSourceLikelihood_set_verbose(*args)
    def verbose(*args): return _pointlike.PointSourceLikelihood_verbose(*args)
    def value(*args): return _pointlike.PointSourceLikelihood_value(*args)
    def integral(*args): return _pointlike.PointSourceLikelihood_integral(*args)
    __swig_getmethods__["setParameters"] = lambda x: _pointlike.PointSourceLikelihood_setParameters
    if _newclass:setParameters = staticmethod(_pointlike.PointSourceLikelihood_setParameters)
    __swig_getmethods__["setDefaultUmax"] = lambda x: _pointlike.PointSourceLikelihood_setDefaultUmax
    if _newclass:setDefaultUmax = staticmethod(_pointlike.PointSourceLikelihood_setDefaultUmax)
    def sigma(*args): return _pointlike.PointSourceLikelihood_sigma(*args)
    __swig_getmethods__["set_gamma_level"] = lambda x: _pointlike.PointSourceLikelihood_set_gamma_level
    if _newclass:set_gamma_level = staticmethod(_pointlike.PointSourceLikelihood_set_gamma_level)
    __swig_getmethods__["set_sigma_level"] = lambda x: _pointlike.PointSourceLikelihood_set_sigma_level
    if _newclass:set_sigma_level = staticmethod(_pointlike.PointSourceLikelihood_set_sigma_level)
    __swig_getmethods__["set_diffuse"] = lambda x: _pointlike.PointSourceLikelihood_set_diffuse
    if _newclass:set_diffuse = staticmethod(_pointlike.PointSourceLikelihood_set_diffuse)
    __swig_getmethods__["addBackgroundPointSource"] = lambda x: _pointlike.PointSourceLikelihood_addBackgroundPointSource
    if _newclass:addBackgroundPointSource = staticmethod(_pointlike.PointSourceLikelihood_addBackgroundPointSource)
    __swig_getmethods__["clearBackgroundPointSource"] = lambda x: _pointlike.PointSourceLikelihood_clearBackgroundPointSource
    if _newclass:clearBackgroundPointSource = staticmethod(_pointlike.PointSourceLikelihood_clearBackgroundPointSource)
    def recalc(*args): return _pointlike.PointSourceLikelihood_recalc(*args)
    __swig_getmethods__["minlevel"] = lambda x: _pointlike.PointSourceLikelihood_minlevel
    if _newclass:minlevel = staticmethod(_pointlike.PointSourceLikelihood_minlevel)
    __swig_getmethods__["maxlevel"] = lambda x: _pointlike.PointSourceLikelihood_maxlevel
    if _newclass:maxlevel = staticmethod(_pointlike.PointSourceLikelihood_maxlevel)
    __swig_getmethods__["set_levels"] = lambda x: _pointlike.PointSourceLikelihood_set_levels
    if _newclass:set_levels = staticmethod(_pointlike.PointSourceLikelihood_set_levels)
    __swig_getmethods__["set_tolerance"] = lambda x: _pointlike.PointSourceLikelihood_set_tolerance
    if _newclass:set_tolerance = staticmethod(_pointlike.PointSourceLikelihood_set_tolerance)
    __swig_getmethods__["gamma_level"] = lambda x: _pointlike.PointSourceLikelihood_gamma_level
    if _newclass:gamma_level = staticmethod(_pointlike.PointSourceLikelihood_gamma_level)
    __swig_getmethods__["sigma_level"] = lambda x: _pointlike.PointSourceLikelihood_sigma_level
    if _newclass:sigma_level = staticmethod(_pointlike.PointSourceLikelihood_sigma_level)
    def __getitem__(*args): return _pointlike.PointSourceLikelihood___getitem__(*args)
PointSourceLikelihood_swigregister = _pointlike.PointSourceLikelihood_swigregister
PointSourceLikelihood_swigregister(PointSourceLikelihood)
PointSourceLikelihood_setParameters = _pointlike.PointSourceLikelihood_setParameters
PointSourceLikelihood_setDefaultUmax = _pointlike.PointSourceLikelihood_setDefaultUmax
PointSourceLikelihood_set_gamma_level = _pointlike.PointSourceLikelihood_set_gamma_level
PointSourceLikelihood_set_sigma_level = _pointlike.PointSourceLikelihood_set_sigma_level
PointSourceLikelihood_set_diffuse = _pointlike.PointSourceLikelihood_set_diffuse
PointSourceLikelihood_addBackgroundPointSource = _pointlike.PointSourceLikelihood_addBackgroundPointSource
PointSourceLikelihood_clearBackgroundPointSource = _pointlike.PointSourceLikelihood_clearBackgroundPointSource
PointSourceLikelihood_minlevel = _pointlike.PointSourceLikelihood_minlevel
PointSourceLikelihood_maxlevel = _pointlike.PointSourceLikelihood_maxlevel
PointSourceLikelihood_set_levels = _pointlike.PointSourceLikelihood_set_levels
PointSourceLikelihood_set_tolerance = _pointlike.PointSourceLikelihood_set_tolerance
PointSourceLikelihood_gamma_level = _pointlike.PointSourceLikelihood_gamma_level
PointSourceLikelihood_sigma_level = _pointlike.PointSourceLikelihood_sigma_level

class Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_Data(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(*args): return _pointlike.Data_add(*args)
    def addgti(*args): return _pointlike.Data_addgti(*args)
    def map(*args): return _pointlike.Data_map(*args)
    def setHistoryFile(*args): return _pointlike.Data_setHistoryFile(*args)
    __swig_destroy__ = _pointlike.delete_Data
    __del__ = lambda self : None;
    def minTime(*args): return _pointlike.Data_minTime(*args)
    def maxTime(*args): return _pointlike.Data_maxTime(*args)
    __swig_getmethods__["scale"] = lambda x: _pointlike.Data_scale
    if _newclass:scale = staticmethod(_pointlike.Data_scale)
    __swig_getmethods__["set_scale"] = lambda x: _pointlike.Data_set_scale
    if _newclass:set_scale = staticmethod(_pointlike.Data_set_scale)
    __swig_getmethods__["class_level"] = lambda x: _pointlike.Data_class_level
    if _newclass:class_level = staticmethod(_pointlike.Data_class_level)
    __swig_getmethods__["set_rot"] = lambda x: _pointlike.Data_set_rot
    if _newclass:set_rot = staticmethod(_pointlike.Data_set_rot)
    __swig_getmethods__["get_rot"] = lambda x: _pointlike.Data_get_rot
    if _newclass:get_rot = staticmethod(_pointlike.Data_get_rot)
    __swig_getmethods__["historyfile"] = lambda x: _pointlike.Data_historyfile
    if _newclass:historyfile = staticmethod(_pointlike.Data_historyfile)
    __swig_getmethods__["get_pointing"] = lambda x: _pointlike.Data_get_pointing
    if _newclass:get_pointing = staticmethod(_pointlike.Data_get_pointing)
    __swig_getmethods__["inTimeRange"] = lambda x: _pointlike.Data_inTimeRange
    if _newclass:inTimeRange = staticmethod(_pointlike.Data_inTimeRange)
Data_swigregister = _pointlike.Data_swigregister
Data_swigregister(Data)
Data_scale = _pointlike.Data_scale
Data_set_scale = _pointlike.Data_set_scale
Data_class_level = _pointlike.Data_class_level
Data_set_rot = _pointlike.Data_set_rot
Data_get_rot = _pointlike.Data_get_rot
Data_historyfile = _pointlike.Data_historyfile
Data_get_pointing = _pointlike.Data_get_pointing
Data_inTimeRange = _pointlike.Data_inTimeRange

class CanInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CanInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CanInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_CanInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return _pointlike.CanInfo_value(*args)
    def values(*args): return _pointlike.CanInfo_values(*args)
    def photons(*args): return _pointlike.CanInfo_photons(*args)
    def sigalph(*args): return _pointlike.CanInfo_sigalph(*args)
    def sigma(*args): return _pointlike.CanInfo_sigma(*args)
    def dir(*args): return _pointlike.CanInfo_dir(*args)
    def ra(*args): return _pointlike.CanInfo_ra(*args)
    def dec(*args): return _pointlike.CanInfo_dec(*args)
    def is2bdeleted(*args): return _pointlike.CanInfo_is2bdeleted(*args)
    def isSource(*args): return _pointlike.CanInfo_isSource(*args)
    def pl_slope(*args): return _pointlike.CanInfo_pl_slope(*args)
    def pl_constant(*args): return _pointlike.CanInfo_pl_constant(*args)
    def pl_confidence(*args): return _pointlike.CanInfo_pl_confidence(*args)
    def weighted_count(*args): return _pointlike.CanInfo_weighted_count(*args)
    def skipped(*args): return _pointlike.CanInfo_skipped(*args)
    def hasStrongNeighbor(*args): return _pointlike.CanInfo_hasStrongNeighbor(*args)
    def strongNeighbor(*args): return _pointlike.CanInfo_strongNeighbor(*args)
    def setDelete(*args): return _pointlike.CanInfo_setDelete(*args)
    def setSource(*args): return _pointlike.CanInfo_setSource(*args)
    def set_total_value(*args): return _pointlike.CanInfo_set_total_value(*args)
    def set_sigma(*args): return _pointlike.CanInfo_set_sigma(*args)
    def set_dir(*args): return _pointlike.CanInfo_set_dir(*args)
    def setValue(*args): return _pointlike.CanInfo_setValue(*args)
    def setPhotons(*args): return _pointlike.CanInfo_setPhotons(*args)
    def setSigalph(*args): return _pointlike.CanInfo_setSigalph(*args)
    def set_pl_slope(*args): return _pointlike.CanInfo_set_pl_slope(*args)
    def set_pl_constant(*args): return _pointlike.CanInfo_set_pl_constant(*args)
    def set_pl_confidence(*args): return _pointlike.CanInfo_set_pl_confidence(*args)
    def set_weighted_count(*args): return _pointlike.CanInfo_set_weighted_count(*args)
    def set_skipped(*args): return _pointlike.CanInfo_set_skipped(*args)
    def setHasStrongNeighbor(*args): return _pointlike.CanInfo_setHasStrongNeighbor(*args)
    def setStrongNeighbor(*args): return _pointlike.CanInfo_setStrongNeighbor(*args)
    __swig_destroy__ = _pointlike.delete_CanInfo
    __del__ = lambda self : None;
CanInfo_swigregister = _pointlike.CanInfo_swigregister
CanInfo_swigregister(CanInfo)

class SourceFinder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SourceFinder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceFinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_SourceFinder(*args)
        try: self.this.append(this)
        except: self.this = this
    ALL = _pointlike.SourceFinder_ALL
    EQUATORIAL = _pointlike.SourceFinder_EQUATORIAL
    MIDDLE = _pointlike.SourceFinder_MIDDLE
    POLAR = _pointlike.SourceFinder_POLAR
    def getCandidates(*args): return _pointlike.SourceFinder_getCandidates(*args)
    def examineRegion(*args): return _pointlike.SourceFinder_examineRegion(*args)
    def reExamine(*args): return _pointlike.SourceFinder_reExamine(*args)
    def checkDir(*args): return _pointlike.SourceFinder_checkDir(*args)
    def list_pixels(*args): return _pointlike.SourceFinder_list_pixels(*args)
    def prune_power_law(*args): return _pointlike.SourceFinder_prune_power_law(*args)
    def group_neighbors(*args): return _pointlike.SourceFinder_group_neighbors(*args)
    def prune_neighbors(*args): return _pointlike.SourceFinder_prune_neighbors(*args)
    def prune_adjacent_neighbors(*args): return _pointlike.SourceFinder_prune_adjacent_neighbors(*args)
    def createReg(*args): return _pointlike.SourceFinder_createReg(*args)
    def createTable(*args): return _pointlike.SourceFinder_createTable(*args)
    def getMap(*args): return _pointlike.SourceFinder_getMap(*args)
    def candidateList(*args): return _pointlike.SourceFinder_candidateList(*args)
    def createFitsFile(*args): return _pointlike.SourceFinder_createFitsFile(*args)
    def createRegFile(*args): return _pointlike.SourceFinder_createRegFile(*args)
    def run(*args): return _pointlike.SourceFinder_run(*args)
    __swig_destroy__ = _pointlike.delete_SourceFinder
    __del__ = lambda self : None;
SourceFinder_swigregister = _pointlike.SourceFinder_swigregister
SourceFinder_swigregister(SourceFinder)

class Draw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Draw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Draw, name)
    __repr__ = _swig_repr
    NONE = _pointlike.Draw_NONE
    SIMPLE = _pointlike.Draw_SIMPLE
    CHILDREN = _pointlike.Draw_CHILDREN
    WEIGHTED = _pointlike.Draw_WEIGHTED
    def __init__(self, *args): 
        this = _pointlike.new_Draw(*args)
        try: self.this.append(this)
        except: self.this = this
    def region(*args): return _pointlike.Draw_region(*args)
    def sky(*args): return _pointlike.Draw_sky(*args)
    def setCountType(*args): return _pointlike.Draw_setCountType(*args)
    def galactic(*args): return _pointlike.Draw_galactic(*args)
    def equatorial(*args): return _pointlike.Draw_equatorial(*args)
    def projection(*args): return _pointlike.Draw_projection(*args)
    __swig_destroy__ = _pointlike.delete_Draw
    __del__ = lambda self : None;
Draw_swigregister = _pointlike.Draw_swigregister
Draw_swigregister(Draw)

class DiffuseFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffuseFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiffuseFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_DiffuseFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_DiffuseFunction
    __del__ = lambda self : None;
    def extraGal(*args): return _pointlike.DiffuseFunction_extraGal(*args)
    def value(*args): return _pointlike.DiffuseFunction_value(*args)
    def name(*args): return _pointlike.DiffuseFunction_name(*args)
    def integral(*args): return _pointlike.DiffuseFunction_integral(*args)
    def layers(*args): return _pointlike.DiffuseFunction_layers(*args)
    def image(*args): return _pointlike.DiffuseFunction_image(*args)
DiffuseFunction_swigregister = _pointlike.DiffuseFunction_swigregister
DiffuseFunction_swigregister(DiffuseFunction)

class CompositeSkySpectrum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeSkySpectrum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeSkySpectrum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_CompositeSkySpectrum(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(*args): return _pointlike.CompositeSkySpectrum_add(*args)
    def value(*args): return _pointlike.CompositeSkySpectrum_value(*args)
    def integral(*args): return _pointlike.CompositeSkySpectrum_integral(*args)
    def name(*args): return _pointlike.CompositeSkySpectrum_name(*args)
    def setName(*args): return _pointlike.CompositeSkySpectrum_setName(*args)
    __swig_destroy__ = _pointlike.delete_CompositeSkySpectrum
    __del__ = lambda self : None;
CompositeSkySpectrum_swigregister = _pointlike.CompositeSkySpectrum_swigregister
CompositeSkySpectrum_swigregister(CompositeSkySpectrum)

class PhotonMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotonMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhotonMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_PhotonMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return _pointlike.PhotonMap_value(*args)
    def integral(*args): return _pointlike.PhotonMap_integral(*args)
    def name(*args): return _pointlike.PhotonMap_name(*args)
    def setName(*args): return _pointlike.PhotonMap_setName(*args)
    def addPhoton(*args): return _pointlike.PhotonMap_addPhoton(*args)
    def addPixel(*args): return _pointlike.PhotonMap_addPixel(*args)
    def density(*args): return _pointlike.PhotonMap_density(*args)
    def __call__(*args): return _pointlike.PhotonMap___call__(*args)
    def pixel(*args): return _pointlike.PhotonMap_pixel(*args)
    def extract(*args): return _pointlike.PhotonMap_extract(*args)
    def extract_level(*args): return _pointlike.PhotonMap_extract_level(*args)
    def photonCount(*args): return _pointlike.PhotonMap_photonCount(*args)
    def pixelCount(*args): return _pointlike.PhotonMap_pixelCount(*args)
    def minLevel(*args): return _pointlike.PhotonMap_minLevel(*args)
    def levels(*args): return _pointlike.PhotonMap_levels(*args)
    def energyBins(*args): return _pointlike.PhotonMap_energyBins(*args)
    def write(*args): return _pointlike.PhotonMap_write(*args)
    def addgti(*args): return _pointlike.PhotonMap_addgti(*args)
    def writegti(*args): return _pointlike.PhotonMap_writegti(*args)
    def gti(*args): return _pointlike.PhotonMap_gti(*args)
    __swig_destroy__ = _pointlike.delete_PhotonMap
    __del__ = lambda self : None;
PhotonMap_swigregister = _pointlike.PhotonMap_swigregister
PhotonMap_swigregister(PhotonMap)

class SkyImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_SkyImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def addPoint(*args): return _pointlike.SkyImage_addPoint(*args)
    __swig_destroy__ = _pointlike.delete_SkyImage
    __del__ = lambda self : None;
    def setLayer(*args): return _pointlike.SkyImage_setLayer(*args)
    def getEnergies(*args): return _pointlike.SkyImage_getEnergies(*args)
    def energies(*args): return _pointlike.SkyImage_energies(*args)
    def fill(*args): return _pointlike.SkyImage_fill(*args)
    def clear(*args): return _pointlike.SkyImage_clear(*args)
    def total(*args): return _pointlike.SkyImage_total(*args)
    def minimum(*args): return _pointlike.SkyImage_minimum(*args)
    def maximum(*args): return _pointlike.SkyImage_maximum(*args)
    def count(*args): return _pointlike.SkyImage_count(*args)
    def pixelValue(*args): return _pointlike.SkyImage_pixelValue(*args)
    def getNeighbors(*args): return _pointlike.SkyImage_getNeighbors(*args)
    def __call__(*args): return _pointlike.SkyImage___call__(*args)
    def layers(*args): return _pointlike.SkyImage_layers(*args)
    def projector(*args): return _pointlike.SkyImage_projector(*args)
    def setupImage(*args): return _pointlike.SkyImage_setupImage(*args)
    def naxis1(*args): return _pointlike.SkyImage_naxis1(*args)
    def naxis2(*args): return _pointlike.SkyImage_naxis2(*args)
    def image(*args): return _pointlike.SkyImage_image(*args)
    __swig_getmethods__["setNaN"] = lambda x: _pointlike.SkyImage_setNaN
    if _newclass:setNaN = staticmethod(_pointlike.SkyImage_setNaN)
SkyImage_swigregister = _pointlike.SkyImage_swigregister
SkyImage_swigregister(SkyImage)
SkyImage_setNaN = _pointlike.SkyImage_setNaN

class Exposure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exposure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exposure, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_Exposure(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_Exposure
    __del__ = lambda self : None;
    def value(*args): return _pointlike.Exposure_value(*args)
    def integral(*args): return _pointlike.Exposure_integral(*args)
    def name(*args): return _pointlike.Exposure_name(*args)
Exposure_swigregister = _pointlike.Exposure_swigregister
Exposure_swigregister(Exposure)

class Gti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gti, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_Gti(*args)
        try: self.this.append(this)
        except: self.this = this
    def accept(*args): return _pointlike.Gti_accept(*args)
    def writeExtension(*args): return _pointlike.Gti_writeExtension(*args)
    def applyTimeRangeCut(*args): return _pointlike.Gti_applyTimeRangeCut(*args)
    def minValue(*args): return _pointlike.Gti_minValue(*args)
    def maxValue(*args): return _pointlike.Gti_maxValue(*args)
    __swig_destroy__ = _pointlike.delete_Gti
    __del__ = lambda self : None;
Gti_swigregister = _pointlike.Gti_swigregister
Gti_swigregister(Gti)

class IsotropicPowerLaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotropicPowerLaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IsotropicPowerLaw, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_IsotropicPowerLaw(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_IsotropicPowerLaw
    __del__ = lambda self : None;
    def value(*args): return _pointlike.IsotropicPowerLaw_value(*args)
    def integral(*args): return _pointlike.IsotropicPowerLaw_integral(*args)
IsotropicPowerLaw_swigregister = _pointlike.IsotropicPowerLaw_swigregister
IsotropicPowerLaw_swigregister(IsotropicPowerLaw)

class SimpleTSmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleTSmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleTSmap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pointlike.new_SimpleTSmap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pointlike.delete_SimpleTSmap
    __del__ = lambda self : None;
    def value(*args): return _pointlike.SimpleTSmap_value(*args)
    def integral(*args): return _pointlike.SimpleTSmap_integral(*args)
    def name(*args): return _pointlike.SimpleTSmap_name(*args)
    def run(*args): return _pointlike.SimpleTSmap_run(*args)
    def save(*args): return _pointlike.SimpleTSmap_save(*args)
    def restore(*args): return _pointlike.SimpleTSmap_restore(*args)
    def size(*args): return _pointlike.SimpleTSmap_size(*args)
    def level(*args): return _pointlike.SimpleTSmap_level(*args)
    def clear(*args): return _pointlike.SimpleTSmap_clear(*args)
    def __getitem__(*args): return _pointlike.SimpleTSmap___getitem__(*args)
    def __call__(*args): return _pointlike.SimpleTSmap___call__(*args)
SimpleTSmap_swigregister = _pointlike.SimpleTSmap_swigregister
SimpleTSmap_swigregister(SimpleTSmap)

class CanInfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CanInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CanInfoVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pointlike.CanInfoVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pointlike.CanInfoVector___nonzero__(*args)
    def __len__(*args): return _pointlike.CanInfoVector___len__(*args)
    def pop(*args): return _pointlike.CanInfoVector_pop(*args)
    def __getslice__(*args): return _pointlike.CanInfoVector___getslice__(*args)
    def __setslice__(*args): return _pointlike.CanInfoVector___setslice__(*args)
    def __delslice__(*args): return _pointlike.CanInfoVector___delslice__(*args)
    def __delitem__(*args): return _pointlike.CanInfoVector___delitem__(*args)
    def __getitem__(*args): return _pointlike.CanInfoVector___getitem__(*args)
    def __setitem__(*args): return _pointlike.CanInfoVector___setitem__(*args)
    def append(*args): return _pointlike.CanInfoVector_append(*args)
    def empty(*args): return _pointlike.CanInfoVector_empty(*args)
    def size(*args): return _pointlike.CanInfoVector_size(*args)
    def clear(*args): return _pointlike.CanInfoVector_clear(*args)
    def swap(*args): return _pointlike.CanInfoVector_swap(*args)
    def get_allocator(*args): return _pointlike.CanInfoVector_get_allocator(*args)
    def begin(*args): return _pointlike.CanInfoVector_begin(*args)
    def end(*args): return _pointlike.CanInfoVector_end(*args)
    def rbegin(*args): return _pointlike.CanInfoVector_rbegin(*args)
    def rend(*args): return _pointlike.CanInfoVector_rend(*args)
    def pop_back(*args): return _pointlike.CanInfoVector_pop_back(*args)
    def erase(*args): return _pointlike.CanInfoVector_erase(*args)
    def __init__(self, *args): 
        this = _pointlike.new_CanInfoVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pointlike.CanInfoVector_push_back(*args)
    def front(*args): return _pointlike.CanInfoVector_front(*args)
    def back(*args): return _pointlike.CanInfoVector_back(*args)
    def assign(*args): return _pointlike.CanInfoVector_assign(*args)
    def resize(*args): return _pointlike.CanInfoVector_resize(*args)
    def insert(*args): return _pointlike.CanInfoVector_insert(*args)
    def reserve(*args): return _pointlike.CanInfoVector_reserve(*args)
    def capacity(*args): return _pointlike.CanInfoVector_capacity(*args)
    __swig_destroy__ = _pointlike.delete_CanInfoVector
    __del__ = lambda self : None;
CanInfoVector_swigregister = _pointlike.CanInfoVector_swigregister
CanInfoVector_swigregister(CanInfoVector)



