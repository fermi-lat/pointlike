%module(docstring="Interface to pointlike") pointlike
// $Header: /nfs/slac/g/glast/ground/cvs/pointlike/python/swig_setup.in,v 1.21 2008/07/29 03:52:52 kerrm Exp $
%{
#include <stdexcept>
#include <vector>
#include <utility>

#include "astro/SkyDir.h"
#include "astro/SkyProj.h"
#include "astro/Photon.h"
#include "astro/PointingTransform.h"
#include "astro/PointingHistory.h"
#include "astro/PointingInfo.h"
#include "astro/EarthCoordinate.h"
#include "astro/GPS.h"
#include "astro/SolarSystem.h"

#include "healpix/Healpix.h"
#include "healpix/HealPixel.h"
#include "healpix/HealpixMap.h"

#include "skymaps/DiffuseFunction.h"
#include "skymaps/CompositeSkySpectrum.h"
#include "skymaps/PhotonMap.h"
#include "skymaps/Exposure.h"
#include "skymaps/SkyImage.h"
#include "skymaps/Gti.h"
#include "skymaps/IsotropicPowerLaw.h"
#include "skymaps/Background.h"
#include "skymaps/BinnedPhotonData.h"
#include "skymaps/PhotonBinner.h"
#include "skymaps/Band.h"
#include "skymaps/IParams.h"

#include "embed_python/Module.h"

#include "pointlike/PointSourceLikelihood.h"
#include "pointlike/SimpleLikelihood.h"
#include "pointlike/SourceFinder.h"
#include "pointlike/Data.h"
#include "pointlike/Draw.h"
#include "pointlike/DrawTS.h"
#include "pointlike/SourceList.h"
//fails #include "pointlike/ParamOptimization.h"
#include "pointlike/SimpleTSmap.h"


#include "CLHEP/Vector/Rotation.h"
#include "CLHEP/Vector/EulerAngles.h"

#include "CLHEP/Vector/ThreeVector.h"

%}
%include stl.i
%exception {
   try {
      $action
   } catch (const std::exception & eObj) {
      if( strcmp(eObj.what(),"StopIteration")==0 ){
          PyErr_SetString(PyExc_StopIteration, const_cast<char *>(eObj.what()));
      } else if(strcmp(eObj.what(),"IndexError")==0 ){
          PyErr_SetString(PyExc_IndexError, const_cast<char *>(eObj.what()));
      } else {
          PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(eObj.what()));
      }
      return NULL;
   }
}


%template(DoublePair) std::pair<double, double>;
%template(StringVector) std::vector<std::string>;
%template(DoubleVector) std::vector<double>;
%template(FloatVector) std::vector<float>;
%template(LongVector) std::vector<long>;

%include $(CLHEPBASE)/include/CLHEP/Vector/ThreeVector.h
//%include $(CLHEPROOT)/include/CLHEP/Vector/Rotation.h
namespace CLHEP {
 class HepRotation {
public:
};
}
%extend CLHEP::Hep3Vector{
// for convenience: make it behave like array of 3 elements
   double __getitem__(size_t i) {
      switch (i){
      case 0: return self->x();
      case 1: return self->y();
      case 2: return self->z();
      case 3: throw std::range_error("StopIteration"); //must be exactly this string
      default: throw std::range_error("IndexError");
      }
   }
   size_t __len__() {      return 3;       }
}
%extend astro::SkyDir{
// for convenience: make it behave like array of 3 elements
   double __getitem__(size_t i) {
      switch (i){
      case 0: return self->dir().x();
      case 1: return self->dir().y();
      case 2: return self->dir().z();
      case 3: throw std::range_error("StopIteration"); //must be exactly this string
      default: throw std::range_error("IndexError");
      }
   }
   size_t __len__() {      return 3;       }
}

%extend CLHEP::HepRotation{
   double __getitem__(size_t i){
   switch(i){
      case 0: return self->xx(); case 1: return self->xy(); case 2: return self->xz();
      case 3: return self->yx(); case 4: return self->yy(); case 5: return self->yz();
      case 6: return self->zx(); case 7: return self->zy(); case 8: return self->zz();
      case 9: throw std::range_error("StopIteration"); //must be exactly this string
      default: throw std::range_error("IndexError");
      }
   }
   size_t __len__() {return 9;}
}
%extend skymaps::BinnedPhotonData{
// provide access to the Band objects as an array
   skymaps::Band * __getitem__(size_t i){ 
      if( i == (*self).size() ) throw std::range_error("StopIteration");
      if( i<0 || i > self->size() ) throw std::range_error("IndexError");
      skymaps::BinnedPhotonData::iterator it= self->begin();
      for(int j(0); j!=i; ++j, ++it);
      return &(*it); // note address of
   }
   size_t __len__() {      return self->size();       }
}

%extend pointlike::PointSourceLikelihood{
   pointlike::SimpleLikelihood * __getitem__(size_t i){ 
      if( i == (*self).size() ) throw std::range_error("StopIteration");
      if( i<0 || i > self->size() ) throw std::range_error("IndexError");
      return (*self)[i]; 
   }
   size_t __len__() {      return self->size();       }
}

%extend pointlike::SimpleTSmap{
   float __getitem__(size_t i)            {return (*self)[i];}
   double __call__(const astro::SkyDir& d){return (*self)(d);}
}
%extend healpix::HealpixMap{
   float __getitem__(size_t i)            {return (*self)[i];}
   double __call__(const astro::SkyDir& d){return (*self)(d);}
   size_t __len__() {return self->size();}
}  
%include $(ASTROROOT)/astro/SkyProj.h
%include $(ASTROROOT)/astro/SkyDir.h
%include $(ASTROROOT)/astro/Photon.h
%include $(ASTROROOT)/astro/PointingTransform.h
%include $(ASTROROOT)/astro/PointingHistory.h
%include $(ASTROROOT)/astro/PointingInfo.h
%include $(ASTROROOT)/astro/EarthCoordinate.h
%include $(ASTROROOT)/astro/GPS.h
%include $(ASTROROOT)/astro/Quaternion.h
%include $(ASTROROOT)/astro/JulianDate.h
%include $(ASTROROOT)/astro/SolarSystem.h


%include $(HEALPIXROOT)/healpix/Healpix.h
%include $(HEALPIXROOT)/healpix/HealpixMap.h

// fails now
//%include $(HEALPIXROOT)/healpix/HealPixel.h

%include $(EMBED_PYTHONROOT)/embed_python/Module.h
    
%include $(SKYMAPSROOT)/skymaps/DiffuseFunction.h
%include $(SKYMAPSROOT)/skymaps/CompositeSkySpectrum.h
%include $(SKYMAPSROOT)/skymaps/PhotonMap.h
%include $(SKYMAPSROOT)/skymaps/SkyImage.h
%include $(SKYMAPSROOT)/skymaps/Exposure.h
%include $(SKYMAPSROOT)/skymaps/Gti.h
%extend skymaps::Gti{
 //  skymaps::Gti * __getitem__(size_t i){ 
 //     if( i == self->getNumIntervals() ) throw std::range_error("StopIteration");
 //     if( i<0 || i > self->getNumIntervals() ) throw std::range_error("IndexError");
 //     return (*self)[i]; 
 //  }
   double computeOntime(){return (*self).GtiBase::computeOntime(); } 
    
}
%include $(SKYMAPSROOT)/skymaps/IsotropicPowerLaw.h
%include $(SKYMAPSROOT)/skymaps/Background.h
%include $(SKYMAPSROOT)/skymaps/BinnedPhotonData.h
%include $(SKYMAPSROOT)/skymaps/Band.h
%template(SkySpectrumVector) std::vector<skymaps::SkySpectrum*>; 
%include $(SKYMAPSROOT)/skymaps/IParams.h



%include $(POINTLIKEROOT)/pointlike/SimpleLikelihood.h
%include $(POINTLIKEROOT)/pointlike/PointSourceLikelihood.h
%include $(POINTLIKEROOT)/pointlike/Data.h
%include $(POINTLIKEROOT)/pointlike/SourceFinder.h
%include $(POINTLIKEROOT)/pointlike/Draw.h
%include $(POINTLIKEROOT)/pointlike/SimpleTSmap.h
%include $(POINTLIKEROOT)/pointlike/SourceList.h
%extend pointlike::SourceList{
   pointlike::Source & __getitem__(size_t i){ 
      if( i == (*self).size() ) throw std::range_error("StopIteration");
      if( i<0 || i > self->size() ) throw std::range_error("IndexError");
      return (*self)[i]; 
   }
   size_t __len__() {      return self->size();       }
   
   void append( pointlike::Source& s){
       self->push_back(s); // note makes a copy
   }
}
//fails %include $(POINTLIKEROOT)/pointlike/ParamOptimization.h

%template(SourceVector)  std::vector<pointlike::Source>;
%template(StringDoubleMap) std::map<std::string,std::vector<double> >;
%template(SkyDirIntPairVector) std::vector<std::pair<astro::SkyDir,int> >;
%template(IntIntPairVector) std::vector<std::pair<int,int> >;



//%include $(ASTROROOT)/astro/HealpixArray.h
//%template(HealpixData) astro::HealpixArray<float>;



