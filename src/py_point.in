%module(docstring="Interface to pointlike") py_point
%{
#include <stdexcept>
#include <vector>

#include "astro/SkyDir.h"
#include "astro/SkyProj.h"
#include "healpix/Healpix.h"
#include "healpix/HealPixel.h"
#include "astro/Photon.h"
#include "astro/PointingTransform.h"
#include "astro/PointingHistory.h"
#include "astro/PointingInfo.h"
#include "astro/EarthCoordinate.h"

#include "pointlike/SkyImage.h"


#include "pointlike/PointSourceLikelihood.h"
#include "pointlike/SimpleLikelihood.h"
#include "pointlike/SourceFinder.h"
#include "pointlike/Data.h"
#include "pointlike/Draw.h"
#include "pointlike/DiffuseFunction.h"
#include "pointlike/CompositeSkySpectrum.h"
#include "pointlike/PhotonMap.h"
#include "pointlike/Exposure.h"


#include "CLHEP/Vector/Rotation.h"
#include "CLHEP/Vector/EulerAngles.h"

#include "CLHEP/Vector/ThreeVector.h"

%}
%include stl.i
%exception {
   try {
      $action
   } catch (std::exception & eObj) {
      if( strcmp(eObj.what(),"StopIteration")==0 ){
          PyErr_SetString(PyExc_StopIteration, const_cast<char *>(eObj.what()));
      } else if(strcmp(eObj.what(),"IndexError")==0 ){
          PyErr_SetString(PyExc_IndexError, const_cast<char *>(eObj.what()));
      } else {
          PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(eObj.what()));
      }
      return NULL;
   }
}


%template(DoublePair) std::pair<double, double>;
%template(StringVector) std::vector<std::string>;
%template(DoubleVector) std::vector<double>;

%include $(CLHEPBASE)/include/CLHEP/Vector/ThreeVector.h
//%include $(CLHEPBASE)/include/CLHEP/Vector/Rotation.h
namespace CLHEP {
 class HepRotation {
public:
};
}
%extend CLHEP::Hep3Vector{
// for convenience: make it behave like array of 3 elements
   double __getitem__(size_t i) {
      switch (i){
      case 0: return self->x();
      case 1: return self->y();
      case 2: return self->z();
      case 3: throw std::exception("StopIteration"); //must be exactly this string
      default: throw std::exception("IndexError");
      }
   }
   size_t __len__() {      return 3;       }
}
%extend astro::SkyDir{
// for convenience: make it behave like array of 3 elements
   double __getitem__(size_t i) {
      switch (i){
      case 0: return self->dir().x();
      case 1: return self->dir().y();
      case 2: return self->dir().z();
      case 3: throw std::exception("StopIteration"); //must be exactly this string
      default: throw std::exception("IndexError");
      }
   }
   size_t __len__() {      return 3;       }
}

%extend CLHEP::HepRotation{
   double __getitem__(size_t i){
   switch(i){
      case 0: return self->xx(); case 1: return self->xy(); case 2: return self->xz();
      case 3: return self->yx(); case 4: return self->yy(); case 5: return self->yz();
      case 6: return self->zx(); case 7: return self->zy(); case 8: return self->zz();
      case 9: throw std::exception("StopIteration"); //must be exactly this string
      default: throw std::exception("IndexError");
      }
   }
   size_t __len__() {return 9;}
}

%extend pointlike::PointSourceLikelihood{
   pointlike::SimpleLikelihood * __getitem__(size_t i){
      return (*self)[i];
    }

}

  
%include $(ASTROROOT)/astro/SkyProj.h
%include $(ASTROROOT)/astro/SkyDir.h
%include $(ASTROROOT)/astro/Photon.h
%include $(ASTROROOT)/astro/PointingTransform.h
%include $(ASTROROOT)/astro/PointingHistory.h
%include $(ASTROROOT)/astro/PointingInfo.h
// need to fix earthRadius()
//%include $(ASTROROOT)/astro/EarthCoordinate.h

%include $(HEALPIXROOT)/healpix/Healpix.h

// fails now
//%include $(HEALPIXROOT)/healpix/HealPixel.h

    
%include $(POINTLIKEROOT)/pointlike/SimpleLikelihood.h
%include $(POINTLIKEROOT)/pointlike/PointSourceLikelihood.h
%include $(POINTLIKEROOT)/pointlike/Data.h
%include $(POINTLIKEROOT)/pointlike/SourceFinder.h
%include $(POINTLIKEROOT)/pointlike/Draw.h
%include $(POINTLIKEROOT)/pointlike/DiffuseFunction.h
%include $(POINTLIKEROOT)/pointlike/CompositeSkySpectrum.h
%include $(POINTLIKEROOT)/pointlike/PhotonMap.h
%include $(POINTLIKEROOT)/pointlike/SkyImage.h
%include $(POINTLIKEROOT)/pointlike/Exposure.h

%template(CanInfoVector) std::vector<pointlike::CanInfo>;


//%include $(ASTROROOT)/astro/HealpixArray.h
//%template(HealpixData) astro::HealpixArray<float>;



