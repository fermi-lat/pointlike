/** @file likelihood_main.cxx


*/
#include "point/PointSourceLikelihood.h"

#include "tools/Data.h"

#include <iostream>
#include <iomanip>

class Points{public:
    std::string name; double ra, dec;
}points[]={
#if 1
    {"MRF0320", 309.03, -18.59},
    {"MRF0002", 114.31,  70.23},
    {"MRF0168(vela)",128.84, -45.17},
#endif
#if 0
{"PSR_B0531p21	",  83.6400,      22.0100 },
{"PSR_J0551m0937",  87.9340,      -9.6180 },
{"PSR_J0633p1746",  98.4800,      17.7800 },
{"PSR_J0709m2646",  107.3000,    -26.7700 },
{"PSR_J0717m1235",  109.4500,    -12.5900 },
{"PSR_J0801m3412",  120.4400,    -34.2100 },
{"PSR_B0833m45	",  128.8300,    -45.1800 },
{"PSR_J0837m3515",  129.2600,    -35.2600 },
{"PSR_J0857m8850",  134.3500,    -88.8400 },
{"PSR_J0904m5008",  136.0700,    -50.1400 },
{"PSR_J0905m4047",  136.3000,    -40.7900 },
{"PSR_J0913m4859",  138.4300,    -48.9900 },
{"PSR_J0915m5845",  138.7600,    -58.7600 },
{"PSR_J0955m5434",  148.8200,    -54.5700 },
{"PSR_J1012m5857",  153.2100,    -58.9600 },
{"PSR_J1012m5830",  153.2300,    -58.5100 },
#endif
{"PSR_J1013m5934",  153.3800,    -59.5800 },
#if 0
{"PSR_J1015m5719",  153.9100,    -57.3200 },
{"PSR_J1016m5857",  154.0900,    -58.9500 },
{"PSR_J1031m5829",  157.7800,    -58.4900 },
{"PSR_B1055m52	",  164.4900,    -52.4500 },
{"PSR_J1103m6025",  165.8800,    -60.4200 },
{"PSR_J1104m6103",  166.0700,    -61.0500 },
{"PSR_J1105m6107",  166.3600,    -61.1300 },
{"PSR_J1239m6515",  189.8200,    -65.2600 },
{"PSR_J1314m6101",  198.6000,    -61.0200 },
{"PSR_J1314m6303",  198.7100,    -63.0500 },
{"PSR_J1407m6153",  211.9800,    -61.9000 },
{"PSR_J1412m6145",  213.0300,    -61.7600 },
{"PSR_J1413m6141",  213.2900,    -61.6900 },
{"PSR_J1420m6048",  215.0300,    -60.8000 },
{"PSR_J1428m6441",  217.0900,    -64.6900 },
{"PSR_J1510m5714",  227.6100,    -57.2400 },
{"PSR_J1556m5230",  239.1800,    -52.5000 },
{"PSR_J1611m4714",  242.8700,    -47.2400 },
{"PSR_J1613m5013",  243.3900,    -50.2200 },
{"PSR_J1631m4813",  247.7700,    -48.2200 },
{"PSR_J1637m4721",  249.3000,    -47.3600 },
{"PSR_J1637m4642",  249.3100,    -46.7000 },
{"PSR_J1637m4642",  249.3100,    -46.7000 },
{"PSR_J1638m5226",  249.7500,    -52.4500 },
{"PSR_J1640m4715",  250.0500,    -47.2600 },
{"PSR_J1640m4648",  250.2000,    -46.8200 },
{"PSR_J1645m3809",  251.4900,    -38.1500 },
{"PSR_J1646m4541",  251.6600,    -45.6800 },
{"PSR_J1649m4227",  252.4200,    -42.4500 },
{"PSR_J1659m5022",  254.9800,    -50.3700 },
{"PSR_J1707m4729",  256.8200,    -47.5000 },
{"PSR_B1706m44	",  257.4300,    -44.4900 },
{"PSR_J1710m3408",  257.5200,    -34.1500 },
{"PSR_J1713m3844",  258.2600,    -38.7400 },
{"PSR_J1713m3754",  258.3300,    -37.9200 },
{"PSR_J1716m3724",  259.0500,    -37.4100 },
{"PSR_J1719m7402",  259.8700,    -74.0400 },
{"PSR_J1734m3827",  263.7000,    -38.4600 },
{"PSR_J1735m5757",  263.9600,    -57.9600 },
{"PSR_J1736m3301",  264.0500,    -33.0200 },
{"PSR_J1737m3147",  264.4000,    -31.7900 },
{"PSR_J1739m2903",  264.9000,    -29.0500 },
{"PSR_J1741m2019",  265.2800,    -20.3200 },
{"PSR_J1741m3927",  265.3200,    -39.4700 },
{"PSR_J1742m2721",  265.5700,    -27.3500 },
{"PSR_J1745m0952",  266.2800,    -9.8760  },
{"PSR_J1747m1946",  266.7900,    -19.7800 },
{"PSR_J1805m3136",  271.2800,    -31.6000 },
{"PSR_J1805m2149",  271.3700,    -21.8200 },
{"PSR_J1819m1532",  274.9800,    -15.5500 },
{"PSR_J1821p17	",  275.3100,    17.2600  },
{"PSR_J1825m1446",  276.2600,    -14.7800 },
{"PSR_J1825m1446",  276.2600,    -14.7800 },
{"PSR_J1826m1526",  276.5500,    -15.4300 },
{"PSR_J1831m1116",  277.9000,    -11.2800 },
{"PSR_J1833m0937",  278.3300,    -9.6270  },
{"PSR_J1836m0436",  279.2200,    -4.6080  },
{"PSR_J1837m0559",  279.3500,    -5.9920  },
{"PSR_J1837m0604",  279.4400,    -6.0820  },
{"PSR_J1838m1128",  279.5300,    -11.4700 },
{"PSR_J1838m0453",  279.5500,    -4.8900  },
{"PSR_J1839p0210",  279.9600,    2.1670	  },
{"PSR_J1840m0805",  280.1500,    -8.0990  },
{"PSR_J1840m0834",  280.1900,    -8.5830 },
{"PSR_J1841m0501",  280.4400,    -5.0210 },
{"PSR_J1842m0652",  280.6000,    -6.8700 },
{"PSR_J1852m2610",  283.2500,    -26.1700},
{"PSR_J1856p0113",  284.0500,    1.2210	 },
{"PSR_J1858p0809",  284.5500,    8.1650	 },
{"PSR_J1902p0556",  285.6800,    5.9390	 },
{"PSR_J1902p0615",  285.7000,    6.2740	 },
{"PSR_J1905p0616",  286.2800,    6.2710	 },
{"PSR_J1918p2359",  289.5200,    24.0000 },
{"PSR_J1919p1226",  289.8100,    12.4400 },
{"PSR_J1937p1648",  294.3500,    16.8100 },
{"PSR_J1939p2613",  294.9200,    26.2300 },
{"PSR_J1946p1950",  296.5900,    19.8300 },
{"PSR_B1951p32	",  298.2400,    32.8800 },
{"PSR_J1955p2149",  298.9800,    21.8200 },
{"PSR_J2004p2528",  301.2100,    25.4700 },
{"PSR_J2021p3651",  305.2700,    36.8600 },
{"PSR_J2101p4820",  315.2700,    48.3500 },
{"PSR_J2229p6114",  337.2800,    61.2400 },

#endif
    {"",0,0}
};

int main(int argc, char** argv)
{
    using namespace astro;
    using namespace point;

    int rc(0);
    try{
        // defaults
        
        double level(8), radius(10), event_type(0);

        std::string 
            infile( 
        //"F:/glast/data/root_files/checkout3_thin.root");
        //"D:/common/healpix/test_data/points-55days_events.root");
        //"D:/common/healpix/test_data/point_monochromatic_events.root"
        "F:/glast/data/DC2/allsky.root"
        );
#if 0
        int n(0);
        if( ++n<argc) name = argv[n];
        if( ++n<argc) ra = ::atof(argv[n]);
        if( ++n<argc) dec = ::atof(argv[n]);
#endif
        // use the simple Data class to create the PhotonData object
        Data x(infile,event_type);

#if 0
        PointSourceLikelihood like(x, name, astro::SkyDir(ra,dec), radius);
        like.set_verbose(false);
#endif
        for( int n=0; !points[n].name.empty(); ++n){
                        
            PointSourceLikelihood like(x, points[n].name, astro::SkyDir(points[n].ra,points[n].dec), radius);
            like.set_verbose(true);
            like.printSpectrum(); 

            if( like.TS()>10) {
               like.localize();
            //std::cout << std::fixed << std::setprecision(4) << "Location: " << like.dir().ra()<< ", " << like.dir().dec() << ", error "<< like.errorCircle()<< std::endl;
            }
        };

    }catch(const std::exception& e){
        std::cerr << "Caught exception " << typeid(e).name() 
            << " \"" << e.what() << "\"" << std::endl;
        rc=1;
    }
     return rc;
}

